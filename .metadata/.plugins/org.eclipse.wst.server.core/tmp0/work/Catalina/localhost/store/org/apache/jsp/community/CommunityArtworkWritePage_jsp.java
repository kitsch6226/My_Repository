/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.39
 * Generated at: 2020-12-03 07:48:24 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.community;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class CommunityArtworkWritePage_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("jar:file:/I:/work2/store/WebContent/WEB-INF/lib/javax.servlet.jsp.jstl-1.2.1.jar!/META-INF/c.tld", Long.valueOf(1323225978000L));
    _jspx_dependants.put("/WEB-INF/lib/javax.servlet.jsp.jstl-1.2.1.jar", Long.valueOf(1605833312000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<style type=\"text/css\">\r\n");
      out.write("* {\r\n");
      out.write("\tmargin: 0;\r\n");
      out.write("\tpadding: 0;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".indexcenterdiv {\r\n");
      out.write("\twidth: 80%;\r\n");
      out.write("\theight: 100%;\r\n");
      out.write("\tmargin: 0 auto;\r\n");
      out.write("\tpadding: 128px 0px;\r\n");
      out.write("\tdisplay: table;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".settingcenterdiv {\r\n");
      out.write("\tpadding: 0;\r\n");
      out.write("\toverflow: hidden;\r\n");
      out.write("\tpadding: 20px;\r\n");
      out.write("\tmargin-top: 20px;\r\n");
      out.write("\tborder-radius: 6px;\r\n");
      out.write("\toverflow: hidden;\r\n");
      out.write("\tborder: none;\r\n");
      out.write("\tbackground: #474747;\r\n");
      out.write("\tcolor: lightgray;\r\n");
      out.write("\tdisplay: block;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".settinginput {\r\n");
      out.write("\tmargin-top: 10px;\r\n");
      out.write("\tpadding: 10px;\r\n");
      out.write("\twidth: 70%;\r\n");
      out.write("\toutline: none;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".settingp {\r\n");
      out.write("\tmargin-top: 20px;\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("\tfunction fileCheck(file1) { // 사이즈체크\r\n");
      out.write("\t\tvar pathpoint1 = file1.value.lastIndexOf('.');\r\n");
      out.write("\t\tvar filepoint1 = file1.value.substring(pathpoint1 + 1, file1.length);\r\n");
      out.write("\t\tvar filetype1 = filepoint1.toLowerCase();\r\n");
      out.write("\r\n");
      out.write("\t\tvar maxSize = 5 * 1024 * 1024 //5MB\r\n");
      out.write("\t\tvar fileSize1 = 0;\r\n");
      out.write("\t\tvar fileSize2 = 0;\r\n");
      out.write("\t\t// 브라우저 확인\r\n");
      out.write("\t\tvar browser = navigator.appName;\r\n");
      out.write("\t\t// 익스플로러일 경우\r\n");
      out.write("\t\tif (browser == \"Microsoft Internet Explorer\") {\r\n");
      out.write("\t\t\tvar oas = new ActiveXObject(\"Scripting.FileSystemObject\");\r\n");
      out.write("\t\t\tif (file1 != null) {\r\n");
      out.write("\t\t\t\tfileSize1 = oas.getFile(file1.value).size;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t// 익스플로러가 아닐경우\r\n");
      out.write("\t\telse {\r\n");
      out.write("\t\t\tif (file1.value != '') {\r\n");
      out.write("\t\t\t\tfileSize1 = file1.files[0].size;\r\n");
      out.write("\t\t\t\tif (filetype1 == 'jpg' || filetype1 == 'gif'\r\n");
      out.write("\t\t\t\t\t\t|| filetype1 == 'png' || filetype1 == 'jpeg'\r\n");
      out.write("\t\t\t\t\t\t|| filetype1 == 'bmp') {\r\n");
      out.write("\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\talert(\"이미지 파일만 첨부 가능합니다.\");\r\n");
      out.write("\t\t\t\t\treturn;\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\tif (fileSize1 > maxSize) {\r\n");
      out.write("\t\t\t\t\talert(\"첨부파일 사이즈는 5MB 이내로 등록 가능합니다.\");\r\n");
      out.write("\t\t\t\t\treturn;\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t}if(file1.value.length>200){\r\n");
      out.write("\t\t\t\talert(\"파일 이름이 너무 길어요... 최대 200자!\");\r\n");
      out.write("\t\t\t\treturn;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tdocument.communityArtworkAddForm.submit();\r\n");
      out.write("\t}\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body style=\"background-color: #1f1f1f;\">\r\n");
      out.write("\t<form name=\"communityArtworkAddForm\" action=\"addArtwork.go\"\r\n");
      out.write("\t\tenctype=\"multipart/form-data\" method=\"post\">\r\n");
      out.write("\t\t<div class=\"indexcenterdiv\">\r\n");
      out.write("\t\t\t<h1 style=\"color: lightgray;\">작품 등록</h1>\r\n");
      out.write("\t\t\t<div class=\"settingcenterdiv\">\r\n");
      out.write("\t\t\t\t<h3>작품 이미지</h3>\r\n");
      out.write("\t\t\t\t<div style=\"width: 100%; display: table;\">\r\n");
      out.write("\t\t\t\t\t<input type=\"file\" name=\"image\" accept=\".jpg,.png\"\r\n");
      out.write("\t\t\t\t\t\tstyle=\"float: left; margin-top: 20px;\" />\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t<div style=\"width: 100%; margin-top: 40px;\">\r\n");
      out.write("\t\t\t\t\t<h3>주의 사항</h3>\r\n");
      out.write("\t\t\t\t\t<p class=\"settingp\">\r\n");
      out.write("\t\t\t\t\t\t1. 개인 또는 단체의 이익을 목적으로 부정한 활동 금지<br>\r\n");
      out.write("\t\t\t\t\t\t<br> (1) 일반적인 회원으로 가장하여 홍보성 게시물을 작성하여서는 안됩니다.<br>\r\n");
      out.write("\t\t\t\t\t\t<br> (2) 이미지 링크용도, 추천인코드, 권한획득 목적의 게시물 반복 작성 등<br> 개인적\r\n");
      out.write("\t\t\t\t\t\t이득을 위한 활동을 하실 수 없습니다.<br>\r\n");
      out.write("\t\t\t\t\t\t<br> (3) 개인, 특정 단체에 대한 긍정적 또는 부정적 여론조성을 위해<br>\r\n");
      out.write("\t\t\t\t\t\t<br> 부당하게 활동할 수 없습니다. <br>\r\n");
      out.write("\t\t\t\t\t</p>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t<button type=\"button\" style=\"margin-top: 30px; padding: 10px 20px;\"\r\n");
      out.write("\t\t\t\t\tonclick=\"fileCheck(this.form.image)\">등록하기</button>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t</form>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}

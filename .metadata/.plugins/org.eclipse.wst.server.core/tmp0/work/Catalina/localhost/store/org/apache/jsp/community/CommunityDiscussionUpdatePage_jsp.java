/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.39
 * Generated at: 2020-12-03 07:47:31 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.community;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class CommunityDiscussionUpdatePage_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("jar:file:/I:/work2/store/WebContent/WEB-INF/lib/javax.servlet.jsp.jstl-1.2.1.jar!/META-INF/c.tld", Long.valueOf(1323225978000L));
    _jspx_dependants.put("/WEB-INF/lib/javax.servlet.jsp.jstl-1.2.1.jar", Long.valueOf(1605833312000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<style type=\"text/css\">\r\n");
      out.write("* {\r\n");
      out.write("\tmargin: 0;\r\n");
      out.write("\tpadding: 0;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".indexcenterdiv {\r\n");
      out.write("\twidth: 80%;\r\n");
      out.write("\theight: 100%;\r\n");
      out.write("\tmargin: 0 auto;\r\n");
      out.write("\tpadding: 128px 0px;\r\n");
      out.write("\tdisplay: table;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".settingcenterdiv {\r\n");
      out.write("\tpadding: 0;\r\n");
      out.write("\toverflow: hidden;\r\n");
      out.write("\tpadding: 20px;\r\n");
      out.write("\tmargin-top: 20px;\r\n");
      out.write("\tborder-radius: 6px;\r\n");
      out.write("\toverflow: hidden;\r\n");
      out.write("\tborder: none;\r\n");
      out.write("\tbackground: #474747;\r\n");
      out.write("\tcolor: lightgray;\r\n");
      out.write("\tdisplay: block;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".settinginput {\r\n");
      out.write("\tmargin-top: 10px;\r\n");
      out.write("\tpadding: 10px;\r\n");
      out.write("\twidth: 70%;\r\n");
      out.write("\toutline: none;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".settingp {\r\n");
      out.write("\tmargin-top: 20px;\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("\tfunction fileCheck(file1, file2) { // 사이즈체크\r\n");
      out.write("\t\tvar pathpoint1 = file1.value.lastIndexOf('.');\r\n");
      out.write("\t\tvar filepoint1 = file1.value.substring(pathpoint1 + 1, file1.length);\r\n");
      out.write("\t\tvar filetype1 = filepoint1.toLowerCase();\r\n");
      out.write("\r\n");
      out.write("\t\tvar pathpoint2 = file2.value.lastIndexOf('.');\r\n");
      out.write("\t\tvar filepoint2 = file2.value.substring(pathpoint1 + 1, file2.length);\r\n");
      out.write("\t\tvar filetype2 = filepoint2.toLowerCase();\r\n");
      out.write("\r\n");
      out.write("\t\tvar maxSize = 5 * 1024 * 1024 //5MB\r\n");
      out.write("\t\tvar fileSize1 = 0;\r\n");
      out.write("\t\tvar fileSize2 = 0;\r\n");
      out.write("\t\t// 브라우저 확인\r\n");
      out.write("\t\tvar browser = navigator.appName;\r\n");
      out.write("\r\n");
      out.write("\t\t// 익스플로러일 경우\r\n");
      out.write("\t\tif (browser == \"Microsoft Internet Explorer\") {\r\n");
      out.write("\t\t\tvar oas = new ActiveXObject(\"Scripting.FileSystemObject\");\r\n");
      out.write("\t\t\tif (file1 != null) {\r\n");
      out.write("\t\t\t\tfileSize1 = oas.getFile(file1.value).size;\r\n");
      out.write("\t\t\t} else if (file2 != null) {\r\n");
      out.write("\t\t\t\tfileSize2 = oas.getFile(file2.value).size;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t// 익스플로러가 아닐경우\r\n");
      out.write("\t\telse {\r\n");
      out.write("\t\t\t//파일이 널이 아닐때만 검사\r\n");
      out.write("\t\t\tif (file1.value != '') {\r\n");
      out.write("\r\n");
      out.write("\t\t\t\tfileSize1 = file1.files[0].size;\r\n");
      out.write("\t\t\t\tif (filetype1 == 'jpg' || filetype1 == 'gif'\r\n");
      out.write("\t\t\t\t\t\t|| filetype1 == 'png' || filetype1 == 'jpeg'\r\n");
      out.write("\t\t\t\t\t\t|| filetype1 == 'bmp') {\r\n");
      out.write("\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\talert(\"이미지 파일만 첨부 가능합니다.\");\r\n");
      out.write("\t\t\t\t\treturn;\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t//파일이 널이 아닐때만 검사\r\n");
      out.write("\t\t\t} else if (file2.value != '') {\r\n");
      out.write("\r\n");
      out.write("\t\t\t\tfileSize2 = file2.files[0].size;\r\n");
      out.write("\t\t\t\tif (filetype2 == 'jpg' || filetype2 == 'gif'\r\n");
      out.write("\t\t\t\t\t\t|| filetype2 == 'png' || filetype2 != 'jpeg'\r\n");
      out.write("\t\t\t\t\t\t|| filetype2 != 'bmp') {\r\n");
      out.write("\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\talert(\"이미지 파일만 첨부 가능합니다.\");\r\n");
      out.write("\t\t\t\t\treturn;\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tif (fileSize1 > maxSize && fileSize2 > maxSize) {\r\n");
      out.write("\t\t\talert(\"첨부파일 사이즈는 5MB 이내로 등록 가능합니다.\");\r\n");
      out.write("\t\t\treturn;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tdocument.fileForm.submit();\r\n");
      out.write("\t}\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t<form name=\"fileForm\" action=\"updateDiscussion.go\" method=\"post\"\r\n");
      out.write("\t\tenctype=\"multipart/form-data\">\r\n");
      out.write("\t\t<div class=\"center\" style=\"min-height: 600px\">\r\n");
      out.write("\t\t\t<div class=\"centermiddle\"\r\n");
      out.write("\t\t\t\tstyle=\"padding: 20px; width: 80%; height: 100%; margin: 0 auto;\">\r\n");
      out.write("\t\t\t\t<h1>의견 수정</h1>\r\n");
      out.write("\t\t\t\t<hr style=\"margin: 10px auto;\">\r\n");
      out.write("\t\t\t\t<p>타인을 향한 비방과 욕설등은 제제를 받을 수 있습니다.</p>\r\n");
      out.write("\t\t\t\t<input type=\"hidden\" name=\"dseq\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${discussion.dseq}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\"/>\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t<table\r\n");
      out.write("\t\t\t\t\tstyle=\"padding: 10px; margin: 0 auto; margin-top: 20px; width: 100%; height: 100%; background-color: #474747; border-radius: 6px;\">\r\n");
      out.write("\t\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t\t<td style=\"width: 2%;\">게임 종류</td>\r\n");
      out.write("\t\t\t\t\t\t<td>");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${discussion.kind}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("</td>\r\n");
      out.write("\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t\t<td style=\"width: 10%; padding-top: 10px;\">제목</td>\r\n");
      out.write("\t\t\t\t\t\t<td><input type=\"text\" style=\"width: 100%; padding: 2px 0;\"\r\n");
      out.write("\t\t\t\t\t\t\tname=\"subject\" placeholder=\"제목을 작성해주세요\"\r\n");
      out.write("\t\t\t\t\t\t\tvalue=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${discussion.subject}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\" required /></td>\r\n");
      out.write("\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t\t<td style=\"width: 10%; padding-top: 10px;\">이미지</td>\r\n");
      out.write("\t\t\t\t\t\t<td>");
      if (_jspx_meth_c_005fforEach_005f0(_jspx_page_context))
        return;
      out.write(" <input type=\"file\" name=\"discussionImage1\" maxlength=\"2000\"\r\n");
      out.write("\t\t\t\t\t\t\taccept=\".gif, .jpg, .png\" /></td>\r\n");
      out.write("\t\t\t\t\t\t<td><input type=\"file\" name=\"discussionImage2\"\r\n");
      out.write("\t\t\t\t\t\t\tmaxlength=\"2000\" accept=\".gif, .jpg, .png\" /></td>\r\n");
      out.write("\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t\t<td style=\"padding-top: 10px;\">내용</td>\r\n");
      out.write("\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t\t<td colspan=\"100%\" style=\"padding-top: 10px;\"><textarea\r\n");
      out.write("\t\t\t\t\t\t\t\trows=\"30\" style=\"width: 100%; resize: none;\" name=\"content\"\r\n");
      out.write("\t\t\t\t\t\t\t\tplaceholder=\"이곳에 내용을 적어주세요!\" required>");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${discussion.content}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("</textarea>\r\n");
      out.write("\t\t\t\t\t\t</td>\r\n");
      out.write("\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t</table>\r\n");
      out.write("\t\t\t\t<input type=\"button\"\r\n");
      out.write("\t\t\t\t\tstyle=\"float: right; margin-top: 20px; padding: 5px 20px;\"\r\n");
      out.write("\t\t\t\t\tvalue=\"제 출\"\r\n");
      out.write("\t\t\t\t\tonclick=\"fileCheck( this.form.discussionImage1,this.form.discussionImage2 )\" />\r\n");
      out.write("\t\t\t\t<input type=\"button\"\r\n");
      out.write("\t\t\t\t\tstyle=\"float: left; margin-top: 20px; padding: 5px 20px;\"\r\n");
      out.write("\t\t\t\t\tvalue=\"목 록\" onclick=\"location.href='javascript: history.back()'\" />\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t</form>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_c_005fforEach_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:forEach
    org.apache.taglibs.standard.tag.rt.core.ForEachTag _jspx_th_c_005fforEach_005f0 = (org.apache.taglibs.standard.tag.rt.core.ForEachTag) _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.get(org.apache.taglibs.standard.tag.rt.core.ForEachTag.class);
    boolean _jspx_th_c_005fforEach_005f0_reused = false;
    try {
      _jspx_th_c_005fforEach_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fforEach_005f0.setParent(null);
      // /community/CommunityDiscussionUpdatePage.jsp(132,10) name = var type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fforEach_005f0.setVar("image");
      // /community/CommunityDiscussionUpdatePage.jsp(132,10) name = items type = javax.el.ValueExpression reqTime = true required = false fragment = false deferredValue = true expectedTypeName = java.lang.Object deferredMethod = false methodSignature = null
      _jspx_th_c_005fforEach_005f0.setItems(new org.apache.jasper.el.JspValueExpression("/community/CommunityDiscussionUpdatePage.jsp(132,10) '${discussion.image}'",_jsp_getExpressionFactory().createValueExpression(_jspx_page_context.getELContext(),"${discussion.image}",java.lang.Object.class)).getValue(_jspx_page_context.getELContext()));
      int[] _jspx_push_body_count_c_005fforEach_005f0 = new int[] { 0 };
      try {
        int _jspx_eval_c_005fforEach_005f0 = _jspx_th_c_005fforEach_005f0.doStartTag();
        if (_jspx_eval_c_005fforEach_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
          do {
            out.write("\r\n");
            out.write("\t\t\t\t\t\t\t\t<input type=\"hidden\" name=\"originalimage\" value=\"");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${image}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("\" />\r\n");
            out.write("\t\t\t\t\t\t\t");
            int evalDoAfterBody = _jspx_th_c_005fforEach_005f0.doAfterBody();
            if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
              break;
          } while (true);
        }
        if (_jspx_th_c_005fforEach_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
          return true;
        }
      } catch (java.lang.Throwable _jspx_exception) {
        while (_jspx_push_body_count_c_005fforEach_005f0[0]-- > 0)
          out = _jspx_page_context.popBody();
        _jspx_th_c_005fforEach_005f0.doCatch(_jspx_exception);
      } finally {
        _jspx_th_c_005fforEach_005f0.doFinally();
      }
      _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.reuse(_jspx_th_c_005fforEach_005f0);
      _jspx_th_c_005fforEach_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fforEach_005f0, _jsp_getInstanceManager(), _jspx_th_c_005fforEach_005f0_reused);
    }
    return false;
  }
}
